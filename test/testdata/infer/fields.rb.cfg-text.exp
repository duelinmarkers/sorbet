method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=8]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(Foo) = alias <C Foo>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(Foo))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(Foo) = alias <C Foo>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(Foo))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Foo#initialize {

bb0[rubyRegionId=0, firstDead=9]():
    @ivar$3: Integer = alias @ivar
    <self>: Foo = cast(<self>: NilClass, Foo);
    <cfgAlias>$5: T.class_of(Integer) = alias <C Integer>
    keep_for_ide$4: T.class_of(Integer) = <cfgAlias>$5
    keep_for_ide$4: T.class_of(Integer) = keep_for_ide$4
    <castTemp>$6: Integer(0) = 0
    @ivar$3: Integer = cast(<castTemp>$6: Integer(0), Integer);
    <returnMethodTemp>$2: Integer = @ivar$3
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Foo#foo {

bb0[rubyRegionId=0, firstDead=6]():
    @ivar$4: Integer = alias @ivar
    <self>: Foo = cast(<self>: NilClass, Foo);
    @ivar$4: Integer(2) = 2
    @ivar$4: Integer = "ss"
    <returnMethodTemp>$2: Integer = @ivar$4
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Foo>#<static-init> {

bb0[rubyRegionId=0, firstDead=10]():
    <self>: T.class_of(Foo) = cast(<self>: NilClass, T.class_of(Foo));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$7: Symbol(:initialize) = :initialize
    <statTemp>$8: Symbol(:normal) = :normal
    <statTemp>$3: Symbol(:initialize) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Foo), <statTemp>$7: Symbol(:initialize), <statTemp>$8: Symbol(:normal))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$13: Symbol(:foo) = :foo
    <statTemp>$14: Symbol(:normal) = :normal
    <statTemp>$9: Symbol(:foo) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Foo), <statTemp>$13: Symbol(:foo), <statTemp>$14: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

