begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::TestCasts)
        ::Sorbet::Private::Static.keep_for_ide(::TestCasts)
        <emptyTree>
      end
    end
  end
  class ::TestCasts<<C TestCasts>> < (::<todo sym>)
    def untyped(<blk>)
      <emptyTree>
    end

    def test_casts(<blk>)
      begin
        t = T.assert_type!(<self>.untyped(), Integer)
        t.+(4)
        t1 = T.assert_type!("hi", Integer)
        t1.+(1)
        s = T.cast(<self>.untyped(), String)
        s.+("hi")
        s = T.cast(6, String)
        s.+("hi")
        s.+(3)
        s = T.cast(6, Integer)
        s = T.cast(6, T.untyped)
        s = T.cast(6, Integer)
        s.+("hi")
        s.+(3)
        f = T.cast(6.000000, Float)
        str = T.cast("x", String)
        sym = T.cast(:x, Symbol)
      end
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :untyped, :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :test_casts, :normal)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
